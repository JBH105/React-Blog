{"ast":null,"code":"/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.0): base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\nimport Data from './dom/data';\nimport { executeAfterTransition, getElement } from './util/index';\nimport EventHandler from './dom/event-handler';\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst VERSION = '5.1.0';\n\nclass BaseComponent {\n  constructor(element) {\n    element = getElement(element);\n\n    if (!element) {\n      return;\n    }\n\n    this._element = element;\n    Data.set(this._element, this.constructor.DATA_KEY, this);\n  }\n\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY);\n    EventHandler.off(this._element, this.constructor.EVENT_KEY);\n    Object.getOwnPropertyNames(this).forEach(propertyName => {\n      this[propertyName] = null;\n    });\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated);\n  }\n  /** Static */\n\n\n  static getInstance(element) {\n    return Data.get(getElement(element), this.DATA_KEY);\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null);\n  }\n\n  static get VERSION() {\n    return VERSION;\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!');\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`;\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`;\n  }\n\n}\n\nexport default BaseComponent;","map":{"version":3,"sources":["/home/ts/Documents/JaydeepB/React-project/reactblogweb/node_modules/bootstrap/js/src/base-component.js"],"names":["Data","executeAfterTransition","getElement","EventHandler","VERSION","BaseComponent","constructor","element","_element","set","DATA_KEY","dispose","remove","off","EVENT_KEY","Object","getOwnPropertyNames","forEach","propertyName","_queueCallback","callback","isAnimated","getInstance","get","getOrCreateInstance","config","NAME","Error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AAEA,OAAOA,IAAP,MAAiB,YAAjB;AACA,SACEC,sBADF,EAEEC,UAFF,QAGO,cAHP;AAIA,OAAOC,YAAP,MAAyB,qBAAzB;AAEA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,OAAO,GAAG,OAAhB;;AAEA,MAAMC,aAAN,CAAoB;AAClBC,EAAAA,WAAW,CAACC,OAAD,EAAU;AACnBA,IAAAA,OAAO,GAAGL,UAAU,CAACK,OAAD,CAApB;;AAEA,QAAI,CAACA,OAAL,EAAc;AACZ;AACD;;AAED,SAAKC,QAAL,GAAgBD,OAAhB;AACAP,IAAAA,IAAI,CAACS,GAAL,CAAS,KAAKD,QAAd,EAAwB,KAAKF,WAAL,CAAiBI,QAAzC,EAAmD,IAAnD;AACD;;AAEDC,EAAAA,OAAO,GAAG;AACRX,IAAAA,IAAI,CAACY,MAAL,CAAY,KAAKJ,QAAjB,EAA2B,KAAKF,WAAL,CAAiBI,QAA5C;AACAP,IAAAA,YAAY,CAACU,GAAb,CAAiB,KAAKL,QAAtB,EAAgC,KAAKF,WAAL,CAAiBQ,SAAjD;AAEAC,IAAAA,MAAM,CAACC,mBAAP,CAA2B,IAA3B,EAAiCC,OAAjC,CAAyCC,YAAY,IAAI;AACvD,WAAKA,YAAL,IAAqB,IAArB;AACD,KAFD;AAGD;;AAEDC,EAAAA,cAAc,CAACC,QAAD,EAAWb,OAAX,EAAoBc,UAAU,GAAG,IAAjC,EAAuC;AACnDpB,IAAAA,sBAAsB,CAACmB,QAAD,EAAWb,OAAX,EAAoBc,UAApB,CAAtB;AACD;AAED;;;AAEkB,SAAXC,WAAW,CAACf,OAAD,EAAU;AAC1B,WAAOP,IAAI,CAACuB,GAAL,CAASrB,UAAU,CAACK,OAAD,CAAnB,EAA8B,KAAKG,QAAnC,CAAP;AACD;;AAEyB,SAAnBc,mBAAmB,CAACjB,OAAD,EAAUkB,MAAM,GAAG,EAAnB,EAAuB;AAC/C,WAAO,KAAKH,WAAL,CAAiBf,OAAjB,KAA6B,IAAI,IAAJ,CAASA,OAAT,EAAkB,OAAOkB,MAAP,KAAkB,QAAlB,GAA6BA,MAA7B,GAAsC,IAAxD,CAApC;AACD;;AAEiB,aAAPrB,OAAO,GAAG;AACnB,WAAOA,OAAP;AACD;;AAEc,aAAJsB,IAAI,GAAG;AAChB,UAAM,IAAIC,KAAJ,CAAU,qEAAV,CAAN;AACD;;AAEkB,aAARjB,QAAQ,GAAG;AACpB,WAAQ,MAAK,KAAKgB,IAAK,EAAvB;AACD;;AAEmB,aAATZ,SAAS,GAAG;AACrB,WAAQ,IAAG,KAAKJ,QAAS,EAAzB;AACD;;AAjDiB;;AAoDpB,eAAeL,aAAf","sourcesContent":["/**\n * --------------------------------------------------------------------------\n * Bootstrap (v5.1.0): base-component.js\n * Licensed under MIT (https://github.com/twbs/bootstrap/blob/main/LICENSE)\n * --------------------------------------------------------------------------\n */\n\nimport Data from './dom/data'\nimport {\n  executeAfterTransition,\n  getElement\n} from './util/index'\nimport EventHandler from './dom/event-handler'\n\n/**\n * ------------------------------------------------------------------------\n * Constants\n * ------------------------------------------------------------------------\n */\n\nconst VERSION = '5.1.0'\n\nclass BaseComponent {\n  constructor(element) {\n    element = getElement(element)\n\n    if (!element) {\n      return\n    }\n\n    this._element = element\n    Data.set(this._element, this.constructor.DATA_KEY, this)\n  }\n\n  dispose() {\n    Data.remove(this._element, this.constructor.DATA_KEY)\n    EventHandler.off(this._element, this.constructor.EVENT_KEY)\n\n    Object.getOwnPropertyNames(this).forEach(propertyName => {\n      this[propertyName] = null\n    })\n  }\n\n  _queueCallback(callback, element, isAnimated = true) {\n    executeAfterTransition(callback, element, isAnimated)\n  }\n\n  /** Static */\n\n  static getInstance(element) {\n    return Data.get(getElement(element), this.DATA_KEY)\n  }\n\n  static getOrCreateInstance(element, config = {}) {\n    return this.getInstance(element) || new this(element, typeof config === 'object' ? config : null)\n  }\n\n  static get VERSION() {\n    return VERSION\n  }\n\n  static get NAME() {\n    throw new Error('You have to implement the static method \"NAME\", for each component!')\n  }\n\n  static get DATA_KEY() {\n    return `bs.${this.NAME}`\n  }\n\n  static get EVENT_KEY() {\n    return `.${this.DATA_KEY}`\n  }\n}\n\nexport default BaseComponent\n"]},"metadata":{},"sourceType":"module"}